module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateNation {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createNation(data: NationCreateInput!): Nation!
  updateNation(data: NationUpdateInput!, where: NationWhereUniqueInput!): Nation
  updateManyNations(data: NationUpdateManyMutationInput!, where: NationWhereInput): BatchPayload!
  upsertNation(where: NationWhereUniqueInput!, create: NationCreateInput!, update: NationUpdateInput!): Nation!
  deleteNation(where: NationWhereUniqueInput!): Nation
  deleteManyNations(where: NationWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type Nation {
  id: ID!
  name: String!
  population: Int!
  owner: User!
}

type NationConnection {
  pageInfo: PageInfo!
  edges: [NationEdge]!
  aggregate: AggregateNation!
}

input NationCreateInput {
  id: ID
  name: String!
  population: Int!
  owner: UserCreateOneWithoutNationsInput!
}

input NationCreateManyWithoutOwnerInput {
  create: [NationCreateWithoutOwnerInput!]
  connect: [NationWhereUniqueInput!]
}

input NationCreateWithoutOwnerInput {
  id: ID
  name: String!
  population: Int!
}

type NationEdge {
  node: Nation!
  cursor: String!
}

enum NationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  population_ASC
  population_DESC
}

type NationPreviousValues {
  id: ID!
  name: String!
  population: Int!
}

input NationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  population: Int
  population_not: Int
  population_in: [Int!]
  population_not_in: [Int!]
  population_lt: Int
  population_lte: Int
  population_gt: Int
  population_gte: Int
  AND: [NationScalarWhereInput!]
  OR: [NationScalarWhereInput!]
  NOT: [NationScalarWhereInput!]
}

type NationSubscriptionPayload {
  mutation: MutationType!
  node: Nation
  updatedFields: [String!]
  previousValues: NationPreviousValues
}

input NationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NationWhereInput
  AND: [NationSubscriptionWhereInput!]
}

input NationUpdateInput {
  name: String
  population: Int
  owner: UserUpdateOneRequiredWithoutNationsInput
}

input NationUpdateManyDataInput {
  name: String
  population: Int
}

input NationUpdateManyMutationInput {
  name: String
  population: Int
}

input NationUpdateManyWithoutOwnerInput {
  create: [NationCreateWithoutOwnerInput!]
  delete: [NationWhereUniqueInput!]
  connect: [NationWhereUniqueInput!]
  set: [NationWhereUniqueInput!]
  disconnect: [NationWhereUniqueInput!]
  update: [NationUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [NationUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [NationScalarWhereInput!]
  updateMany: [NationUpdateManyWithWhereNestedInput!]
}

input NationUpdateManyWithWhereNestedInput {
  where: NationScalarWhereInput!
  data: NationUpdateManyDataInput!
}

input NationUpdateWithoutOwnerDataInput {
  name: String
  population: Int
}

input NationUpdateWithWhereUniqueWithoutOwnerInput {
  where: NationWhereUniqueInput!
  data: NationUpdateWithoutOwnerDataInput!
}

input NationUpsertWithWhereUniqueWithoutOwnerInput {
  where: NationWhereUniqueInput!
  update: NationUpdateWithoutOwnerDataInput!
  create: NationCreateWithoutOwnerInput!
}

input NationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  population: Int
  population_not: Int
  population_in: [Int!]
  population_not_in: [Int!]
  population_lt: Int
  population_lte: Int
  population_gt: Int
  population_gte: Int
  owner: UserWhereInput
  AND: [NationWhereInput!]
}

input NationWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  nation(where: NationWhereUniqueInput!): Nation
  nations(where: NationWhereInput, orderBy: NationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nation]!
  nationsConnection(where: NationWhereInput, orderBy: NationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NationConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  nation(where: NationSubscriptionWhereInput): NationSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  password: String!
  nations(where: NationWhereInput, orderBy: NationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Nation!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
  nations: NationCreateManyWithoutOwnerInput
}

input UserCreateOneWithoutNationsInput {
  create: UserCreateWithoutNationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNationsInput {
  id: ID
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
  nations: NationUpdateManyWithoutOwnerInput
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutNationsInput {
  create: UserCreateWithoutNationsInput
  update: UserUpdateWithoutNationsDataInput
  upsert: UserUpsertWithoutNationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutNationsDataInput {
  email: String
  password: String
}

input UserUpsertWithoutNationsInput {
  update: UserUpdateWithoutNationsDataInput!
  create: UserCreateWithoutNationsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  nations_some: NationWhereInput
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    