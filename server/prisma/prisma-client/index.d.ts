// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  nation: (where?: NationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  nation: (where: NationWhereUniqueInput) => NationNullablePromise;
  nations: (args?: {
    where?: NationWhereInput;
    orderBy?: NationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Nation>;
  nationsConnection: (args?: {
    where?: NationWhereInput;
    orderBy?: NationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NationConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createNation: (data: NationCreateInput) => NationPromise;
  updateNation: (args: {
    data: NationUpdateInput;
    where: NationWhereUniqueInput;
  }) => NationPromise;
  updateManyNations: (args: {
    data: NationUpdateManyMutationInput;
    where?: NationWhereInput;
  }) => BatchPayloadPromise;
  upsertNation: (args: {
    where: NationWhereUniqueInput;
    create: NationCreateInput;
    update: NationUpdateInput;
  }) => NationPromise;
  deleteNation: (where: NationWhereUniqueInput) => NationPromise;
  deleteManyNations: (where?: NationWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  nation: (
    where?: NationSubscriptionWhereInput
  ) => NationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type NationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "population_ASC"
  | "population_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type NationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  population?: Maybe<Int>;
  population_not?: Maybe<Int>;
  population_in?: Maybe<Int[] | Int>;
  population_not_in?: Maybe<Int[] | Int>;
  population_lt?: Maybe<Int>;
  population_lte?: Maybe<Int>;
  population_gt?: Maybe<Int>;
  population_gte?: Maybe<Int>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<NationWhereInput[] | NationWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  nations_some?: Maybe<NationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface NationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  population: Int;
  owner: UserCreateOneWithoutNationsInput;
}

export interface UserCreateOneWithoutNationsInput {
  create?: Maybe<UserCreateWithoutNationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNationsInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
}

export interface NationUpdateInput {
  name?: Maybe<String>;
  population?: Maybe<Int>;
  owner?: Maybe<UserUpdateOneRequiredWithoutNationsInput>;
}

export interface UserUpdateOneRequiredWithoutNationsInput {
  create?: Maybe<UserCreateWithoutNationsInput>;
  update?: Maybe<UserUpdateWithoutNationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNationsDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpsertWithoutNationsInput {
  update: UserUpdateWithoutNationsDataInput;
  create: UserCreateWithoutNationsInput;
}

export interface NationUpdateManyMutationInput {
  name?: Maybe<String>;
  population?: Maybe<Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  nations?: Maybe<NationCreateManyWithoutOwnerInput>;
}

export interface NationCreateManyWithoutOwnerInput {
  create?: Maybe<
    NationCreateWithoutOwnerInput[] | NationCreateWithoutOwnerInput
  >;
  connect?: Maybe<NationWhereUniqueInput[] | NationWhereUniqueInput>;
}

export interface NationCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  name: String;
  population: Int;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  nations?: Maybe<NationUpdateManyWithoutOwnerInput>;
}

export interface NationUpdateManyWithoutOwnerInput {
  create?: Maybe<
    NationCreateWithoutOwnerInput[] | NationCreateWithoutOwnerInput
  >;
  delete?: Maybe<NationWhereUniqueInput[] | NationWhereUniqueInput>;
  connect?: Maybe<NationWhereUniqueInput[] | NationWhereUniqueInput>;
  set?: Maybe<NationWhereUniqueInput[] | NationWhereUniqueInput>;
  disconnect?: Maybe<NationWhereUniqueInput[] | NationWhereUniqueInput>;
  update?: Maybe<
    | NationUpdateWithWhereUniqueWithoutOwnerInput[]
    | NationUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | NationUpsertWithWhereUniqueWithoutOwnerInput[]
    | NationUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<NationScalarWhereInput[] | NationScalarWhereInput>;
  updateMany?: Maybe<
    | NationUpdateManyWithWhereNestedInput[]
    | NationUpdateManyWithWhereNestedInput
  >;
}

export interface NationUpdateWithWhereUniqueWithoutOwnerInput {
  where: NationWhereUniqueInput;
  data: NationUpdateWithoutOwnerDataInput;
}

export interface NationUpdateWithoutOwnerDataInput {
  name?: Maybe<String>;
  population?: Maybe<Int>;
}

export interface NationUpsertWithWhereUniqueWithoutOwnerInput {
  where: NationWhereUniqueInput;
  update: NationUpdateWithoutOwnerDataInput;
  create: NationCreateWithoutOwnerInput;
}

export interface NationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  population?: Maybe<Int>;
  population_not?: Maybe<Int>;
  population_in?: Maybe<Int[] | Int>;
  population_not_in?: Maybe<Int[] | Int>;
  population_lt?: Maybe<Int>;
  population_lte?: Maybe<Int>;
  population_gt?: Maybe<Int>;
  population_gte?: Maybe<Int>;
  AND?: Maybe<NationScalarWhereInput[] | NationScalarWhereInput>;
  OR?: Maybe<NationScalarWhereInput[] | NationScalarWhereInput>;
  NOT?: Maybe<NationScalarWhereInput[] | NationScalarWhereInput>;
}

export interface NationUpdateManyWithWhereNestedInput {
  where: NationScalarWhereInput;
  data: NationUpdateManyDataInput;
}

export interface NationUpdateManyDataInput {
  name?: Maybe<String>;
  population?: Maybe<Int>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface NationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NationWhereInput>;
  AND?: Maybe<NationSubscriptionWhereInput[] | NationSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Nation {
  id: ID_Output;
  name: String;
  population: Int;
}

export interface NationPromise extends Promise<Nation>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  population: () => Promise<Int>;
  owner: <T = UserPromise>() => T;
}

export interface NationSubscription
  extends Promise<AsyncIterator<Nation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  population: () => Promise<AsyncIterator<Int>>;
  owner: <T = UserSubscription>() => T;
}

export interface NationNullablePromise
  extends Promise<Nation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  population: () => Promise<Int>;
  owner: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  nations: <T = FragmentableArray<Nation>>(args?: {
    where?: NationWhereInput;
    orderBy?: NationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  nations: <T = Promise<AsyncIterator<NationSubscription>>>(args?: {
    where?: NationWhereInput;
    orderBy?: NationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  nations: <T = FragmentableArray<Nation>>(args?: {
    where?: NationWhereInput;
    orderBy?: NationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface NationConnection {
  pageInfo: PageInfo;
  edges: NationEdge[];
}

export interface NationConnectionPromise
  extends Promise<NationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NationEdge>>() => T;
  aggregate: <T = AggregateNationPromise>() => T;
}

export interface NationConnectionSubscription
  extends Promise<AsyncIterator<NationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNationSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface NationEdge {
  node: Nation;
  cursor: String;
}

export interface NationEdgePromise extends Promise<NationEdge>, Fragmentable {
  node: <T = NationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NationEdgeSubscription
  extends Promise<AsyncIterator<NationEdge>>,
    Fragmentable {
  node: <T = NationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateNation {
  count: Int;
}

export interface AggregateNationPromise
  extends Promise<AggregateNation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNationSubscription
  extends Promise<AsyncIterator<AggregateNation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface NationSubscriptionPayload {
  mutation: MutationType;
  node: Nation;
  updatedFields: String[];
  previousValues: NationPreviousValues;
}

export interface NationSubscriptionPayloadPromise
  extends Promise<NationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NationPreviousValuesPromise>() => T;
}

export interface NationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NationPreviousValuesSubscription>() => T;
}

export interface NationPreviousValues {
  id: ID_Output;
  name: String;
  population: Int;
}

export interface NationPreviousValuesPromise
  extends Promise<NationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  population: () => Promise<Int>;
}

export interface NationPreviousValuesSubscription
  extends Promise<AsyncIterator<NationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  population: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Nation",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
