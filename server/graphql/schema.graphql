type Nation {
	id: ID!
	name: String!
	population: Int!
	owner: User!
}

type User {
	id: ID!
	username: String!
	email: String!
	password: String!
	nations: [Nation]!
}

type Query {
	nations: [Nation]!
	nation(id: ID!): Nation
	users: [User]!
	user(id: ID!): User
}

# APP Only Definitions
type AuthPayload {
	user: User
	isLoginSuccessful: Boolean!
	error: String!
	token: String
}

input UserCreateInput {
	username: String!
	email: String!
	password: String!
}

input NationCreateInput {
	name: String!
	owner: ID!
}

type Mutation {
	createUser(data: UserCreateInput): User!
	createNation(data: NationCreateInput): Nation!
	deleteUser(id: ID!): User!
	deleteNation(id: ID!): Nation!
	authLogin(email: String!, password: String!): AuthPayload
}
